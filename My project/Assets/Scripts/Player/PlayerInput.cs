//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Ninja"",
            ""id"": ""2bd5a5d9-9969-4d61-8b62-ec9a714309cf"",
            ""actions"": [
                {
                    ""name"": ""MoveNinja"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c2a36288-4993-4701-b760-dfd55fb7a724"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d395338a-82c0-40b0-b219-e07cb28516f7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNinja"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f9de2652-4261-4b2d-907e-8c0b9968243b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNinja"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d8ddd3b9-7639-4aa3-b046-7f198b8ac55a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNinja"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""026ebbea-d537-42f9-be7c-baad622f89a3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNinja"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5025c651-3409-4be6-a23b-70480c1685b4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNinja"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Ronin"",
            ""id"": ""9ad52e28-cccd-459e-8c21-a2417680a83a"",
            ""actions"": [
                {
                    ""name"": ""MoveRonin"",
                    ""type"": ""PassThrough"",
                    ""id"": ""42c16ef0-c699-46b9-b26c-fabb03ea924c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Pfeile"",
                    ""id"": ""473d9eb6-af7f-4b4a-b153-171e48ba8ed5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRonin"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3e4304a9-1a24-4d49-a35c-b3e330d188b4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRonin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d50649b6-1233-41ae-8eab-0f4af7b01cb7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRonin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6cacde5a-f2f3-4026-926a-bc555e1105c6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRonin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""98341311-b9a0-421f-b12d-1f76e43e4e56"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRonin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ninja
        m_Ninja = asset.FindActionMap("Ninja", throwIfNotFound: true);
        m_Ninja_MoveNinja = m_Ninja.FindAction("MoveNinja", throwIfNotFound: true);
        // Ronin
        m_Ronin = asset.FindActionMap("Ronin", throwIfNotFound: true);
        m_Ronin_MoveRonin = m_Ronin.FindAction("MoveRonin", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ninja
    private readonly InputActionMap m_Ninja;
    private INinjaActions m_NinjaActionsCallbackInterface;
    private readonly InputAction m_Ninja_MoveNinja;
    public struct NinjaActions
    {
        private @PlayerInput m_Wrapper;
        public NinjaActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveNinja => m_Wrapper.m_Ninja_MoveNinja;
        public InputActionMap Get() { return m_Wrapper.m_Ninja; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NinjaActions set) { return set.Get(); }
        public void SetCallbacks(INinjaActions instance)
        {
            if (m_Wrapper.m_NinjaActionsCallbackInterface != null)
            {
                @MoveNinja.started -= m_Wrapper.m_NinjaActionsCallbackInterface.OnMoveNinja;
                @MoveNinja.performed -= m_Wrapper.m_NinjaActionsCallbackInterface.OnMoveNinja;
                @MoveNinja.canceled -= m_Wrapper.m_NinjaActionsCallbackInterface.OnMoveNinja;
            }
            m_Wrapper.m_NinjaActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveNinja.started += instance.OnMoveNinja;
                @MoveNinja.performed += instance.OnMoveNinja;
                @MoveNinja.canceled += instance.OnMoveNinja;
            }
        }
    }
    public NinjaActions @Ninja => new NinjaActions(this);

    // Ronin
    private readonly InputActionMap m_Ronin;
    private IRoninActions m_RoninActionsCallbackInterface;
    private readonly InputAction m_Ronin_MoveRonin;
    public struct RoninActions
    {
        private @PlayerInput m_Wrapper;
        public RoninActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveRonin => m_Wrapper.m_Ronin_MoveRonin;
        public InputActionMap Get() { return m_Wrapper.m_Ronin; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RoninActions set) { return set.Get(); }
        public void SetCallbacks(IRoninActions instance)
        {
            if (m_Wrapper.m_RoninActionsCallbackInterface != null)
            {
                @MoveRonin.started -= m_Wrapper.m_RoninActionsCallbackInterface.OnMoveRonin;
                @MoveRonin.performed -= m_Wrapper.m_RoninActionsCallbackInterface.OnMoveRonin;
                @MoveRonin.canceled -= m_Wrapper.m_RoninActionsCallbackInterface.OnMoveRonin;
            }
            m_Wrapper.m_RoninActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveRonin.started += instance.OnMoveRonin;
                @MoveRonin.performed += instance.OnMoveRonin;
                @MoveRonin.canceled += instance.OnMoveRonin;
            }
        }
    }
    public RoninActions @Ronin => new RoninActions(this);
    public interface INinjaActions
    {
        void OnMoveNinja(InputAction.CallbackContext context);
    }
    public interface IRoninActions
    {
        void OnMoveRonin(InputAction.CallbackContext context);
    }
}
